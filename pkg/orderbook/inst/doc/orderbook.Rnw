\documentclass[a4paper]{report}
\usepackage[round]{natbib}


\usepackage{Rnews}
\usepackage{fancyvrb}
\usepackage{Sweave}

\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontsize=\small,fontshape=sl}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{Scode}{Verbatim}{fontsize=\small,fontshape=sl}

%% \SweaveOpts{prefix.string=graphics/portfolio}

\bibliographystyle{abbrvnat}

\begin{document}
\begin{article}


\title{orderbook}
\author{Andrew Liu, Khanh Nguyen and David Kane}

%%\VignetteIndexEntry{Using the orderbook package}
%%\VignetteDepends{orderbook}

<<echo = FALSE>>=
options(width = 50, digits = 2, scipen = 5)
cat.df.without.rownames <- function (d, file = ""){
  stopifnot(is.data.frame(d))
  row.names(d) <- 1:nrow(d)
  x <- NULL
  conn <- textConnection("x", "w", local = TRUE)
  capture.output(print(d), file = conn)
  close(conn)
  cat(substring(x, first = max(nchar(row.names(d))) + 2), sep = "\n",
      file = file)
}
@

\maketitle


\setkeys{Gin}{width=0.95\textwidth}

\section*{Introduction}

The limitob package provides functions for exploring and visualizing
orderbook data. For example, we may want to study an orderbook
immediately before a trade occurs, or maybe 50 orders before a trade
occurs, or we want to visualize the change of an orderbook overtime as
the price level fluctuates. The microstructure insights from this sort
of analysis can help in researching short-term trading strategies.

\section*{Background}
To demonstrate the capabilities of the limitob package, we consider
the first 10000 orders for a single stock on June 8, 2010. The orders
are in following form

\begin{verbatim}
A,31285893,1231884,11.49,200,ASK
R,31295779,1231884,150
T,31295779,1231884,11.49,50,BUY
C,31295781,1231884
\end{verbatim}

where A, R, T, C mean Add, Replace, Trade, and Cancel order,
respectively. The first number is the timestamp of the order in
milliseconds after midnight of the users timezone, and the second
number (or string) is the ID of the order. For a Replace the next
number is the new size, while for Add and Trade price comes before
size, followed by the type of order/transaction (BID/ASK or BUY/SELL).

<<results = hide>>=
library(orderbook)
@
<<echo = TRUE>>=
ob = orderbook(feed = "sample.txt")
ob = read.orders(ob, 10000)
ob
@

We create the orderbook object by setting the feed as our
\texttt{sample.txt} data file. Then we read in the first 10,000
orders. We see that the 10000th order occurs at 9:35:02, and there are
631 outstanding bid orders, and 1,856 outstanding ask orders. However,
sometimes the user may want to jump to a place in the orderbook by
time; for example, it is interesting to view the orderbook when the
market opens.
\columnbreak

<<echo = TRUE>>=
ob = read.time(ob, "9:30:00")
summary(ob)
display(ob)
@

Summary provides the user with a set of important summary statistics,
while display by default shows the top five bid and ask price
levels. Suppose we wanted to see the first trade after this time.

<<echo = TRUE>>=
ob = next.trade(ob)
display(ob, n = 1)
@

Note that to save space I set \texttt{n = 1} so that only the top
three bid and ask price levels are displayed. Sometimes a graphical
representation is more useful than simply seeing the price levels and
order sizes in text. By default, the maximum and minimum price levels
shown are 10\% above and below the midpoint price, respectively.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob)
@
\end{figure}

Users might want to view the orderbook fifty orders prior to the
trade occurring. Here we also demonstrate setting the bounds to only
5\% above and below the midpoint price.

<<echo = TRUE>>=
ob.new = read.orders(ob, -50)
@
\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob.new, bounds = 0.05)
@
\end{figure}

Note that there is a particularly large order around \$11.03. It is
helpful to know whether the volume at that price level is comprised of
a single order, or several.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob.new, bounds = 0.05, type = 'o')
@
\end{figure}

Viewing the orderbook with bids on one side and asks on another is
useful, but sometimes users may want to view them side by side to more
directly compare the supply and demand at each price level.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob.new, type = 's')
@
\end{figure}

Users can also view the previous trade, and then pass in the time at
each trade, along with the object, to view a simple animation between
the two times.

<<echo = TRUE, eval = FALSE>>=
prev.ob = previous.trade(ob)
animate.ob(ob, "9:30:00", "9:32:00")
@

Finally, users can easily plot the trade data by using
\texttt{plot.trade}. This creates a simple bar graph of the number of
shares traded at each price level.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plotTrade(ob.new)
@
\end{figure}


\section*{Simulation}

The limitob object supports adding, replacing, and cancelling
orders. To add an order, the user needs to specify the price, size,
and type. Time and ID are optional, and will default to the maximum
time and the maximum ID + 1, respectively. For replacing an order,
only ID and size need to be given, and for cancelling an order, only
ID is necessary. Market orders are also possible by specifying the
size and side (BUY/SELL).

<<echo = TRUE, eval = FALSE>>=
display(ob)
ob = add.order(ob, stuff)
ob = remove.order(ob, stuff)
ob = replace.order(ob, stuff)
ob = market.order(ob, 200, "BUY")
display(ob)
@

Using these tools, the user can write functions to simulate the movement of an orderbook.

In the following example, we consulted \cite{gilles:daniel}. We
simulate 1000 orders. In each iteration there is a 50\% chance for a
cancel order to be placed, 20\% chance for a market order, and 30\%
chance for a limit order. Orders are cancelled completely randomly,
and for a market order there is a 50-50 chance for a buy or sell order
to be placed. The size of the market order always corresponds to the
size of the best ask or bid at the front of the queue. When a limit order
is placed, there is a 50-50 chance for it to be an ask or bid. Then
there is a 35\% chance for the price to be within the spread, in which
case a price is chosen based on a uniform distribution. If the price
is determined to be outside of the spread, a price is chosen using a
power law distribution. The size follows a log-normal distribution.

<<echo = FALSE, eval=TRUE>>=
simulate <- function(ob, n=1000,
                     action.prob = c(cancel=0.5, market=0.2, limit=0.30),
                     order.type  = 0.5,
                     alpha = 0.3,
                     in.spread.prob = 0.35,
                     ...){

    x = ob@current.ob
    ob.names = ob@ob.names
    tmp.midpoint = mid.point(ob)
    tmp.bestask = best.ask(ob)
    tmp.bestbid = best.bid(ob)

    for(i in 1:n) {

          x = ob@current.ob
          if(mid.point(ob) == 0){
              current.price = tmp.midpoint
          } else {
              current.price <- mid.point(ob)
          }

          isbuy = runif(1) < order.type

          if(total.orders(ob) < 250){
              action.prob[1] <- 0
              action.prob[4] = 1 - sum(action.prob[1:3])
          } else {
              action.prob[1] = 0.5
              action.prob[4] = 1 - sum(action.prob[1:3])
          }


          action <- sample(c("Cancel", "Market", "Limit", ""),
                           size=1, prob=action.prob)

          if (action == "Cancel") {
              ## pick an existing ID and cancel the order

              ob <- remove.order(ob, sample(x[[ob.names[5]]], size = 1))

          }
          else if (action == "Market") {

              ## set a new price/ or tick
              if(isbuy) {
                  ob <- market.order(ob, type="BUY",
                                     size = best.ask(ob)[2] )

              } else {
                  ob <- market.order(ob, type="SELL",
                                     size = best.bid(ob)[2] )
              }

          }
          if (action == "Limit") {

              if(spread(ob) <= 0.01){
                  spread.diff = 0
                } else {
                    spread.diff = round(runif(1, 0, spread(ob)), 2)
                }

              out.diff = round((mid.point(ob)*.1)*runif(1)^1/(1 + alpha), 2)

              in.spread = runif(1) < in.spread.prob
              size = round(exp(rnorm(1, mean = 4.5, sd = .8)))

              if(isbuy & in.spread){

                  ob <- add.order(ob, price= max(0,
                                      best.bid(ob)[1] + spread.diff),
                                  size, type="BID")
              } else if(isbuy & !in.spread){
                  ob <- add.order(ob, price = max(0,
                                      best.bid(ob)[1] - out.diff),
                                  size, type = "BID")
              } else if(!isbuy & in.spread){

                  ob <- add.order(ob, price= max(0,
                                      best.ask(ob)[1] - spread.diff),
                                  size, type="ASK")
              } else if (!isbuy & !in.spread){
                  ob <- add.order(ob, price = max(0,
                                      best.ask(ob)[1] + out.diff),
                                  size, type = "ASK")
              }
          }
      }


    invisible(ob)
}
@


<<echo = TRUE, eval = TRUE>>=
ob = simulate(ob)
@
\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob)
@
\end{figure}

\section*{Future work}
There is still much room for improvement with \texttt{limitob}. Aside
from additional optimization, we are looking into creating an
``exchange'' package that can better simulate trading. Ultimately, we
would like to have the ability to backtest high frequency trading strategies.

\section*{Conclusion}
In this short article, we have described the limitob package. limitob
aims to provide user-friendly statistical and visualization tools for
analyzing orderbooks. We demonstrated the functionality of the
package through a series of examples. Users who deal frequently with
orderbook data (i.e high frequency traders) will hopefully
find the package useful. While the curent package is not complex
enough to be a stand-alone platform for developing trading stategies,
it can be useful for generating ideas for strategies.

   \address{Andrew Liu, Khanh Nguyen and David Kane \\
    Kane Capital Management \\
    Cambridge, Massachusetts, USA\\
    \email{Andrew.T.Liu@williams.edu},
	\email{knguyen@cs.umb.edu}, and
	\email{dave@kanecap.com}
	}

\bibliography{limitob}
\end{article}
\end{document}
