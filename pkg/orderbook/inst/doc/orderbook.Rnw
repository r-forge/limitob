\documentclass[a4paper]{report}
\usepackage[round]{natbib}


\usepackage{Rnews}
\usepackage{fancyvrb}
\usepackage{Sweave}

\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontsize=\small,fontshape=sl}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{Scode}{Verbatim}{fontsize=\small,fontshape=sl}

%% \SweaveOpts{prefix.string=graphics/portfolio}

\bibliographystyle{abbrvnat}

\begin{document}
\begin{article}

\title{orderbook}
\author{David Kane, Andrew Liu and Khanh Nguyen}

%%\VignetteIndexEntry{Using the orderbook package}
%%\VignetteDepends{orderbook}

<<echo = FALSE>>=
options(width = 50, digits = 2, scipen = 5)
cat.df.without.rownames <- function (d, file = ""){
  stopifnot(is.data.frame(d))
  row.names(d) <- 1:nrow(d)
  x <- NULL
  conn <- textConnection("x", "w", local = TRUE)
  capture.output(print(d), file = conn)
  close(conn)
  cat(substring(x, first = max(nchar(row.names(d))) + 2), sep = "\n",
      file = file)
}
@

\maketitle


\setkeys{Gin}{width=0.95\textwidth}

\section*{Introduction}

The \pkg{orderbook} package provides facilities for exploring and
visualizing the data associated with an order book. An order book
keeps track of the outstanding limit orders for a financial
instrument, e.g. a stock. A \emph{limit order} is an order to buy or
sell a given quantity of stock at a specified limit price or
better. The number of shares to be bought or sold is known as the
\emph{size}.  An order remains in the order book until fully
executed, i.e. until its size is zero as a result of trades. Partial
executions occur as a result of trades for less than the entire size
of the order. In this case the order remains in the order book at the
same price, but with an appropriately reduced size.

Consider a simple order book containing five limit orders: sell 150
shares of IBM at \$11.11, sell 150 shares of IBM at \$11.08, buy 100
shares of IBM at \$11.05, buy 200 shares of IBM at \$11.05, and buy
200 shares of IBM at \$11.01.

\begin{verbatim}
                 Price          Ask Size

                 $11.11         150
                 $11.08         100
     300         $11.05
     200         $11.01

Bid Size         Price
\end{verbatim}

Orders on the \emph{bid} (\emph{ask}) side represent orders to buy
(sell). The price levels are \$11.11, \$11.08, \$11.05, and
\$11.01. The \emph{inside market} is composed of the \emph{best bid}
at \$11.05 (highest bid price) and the \emph{best ask} at \$11.08
(lowest ask price). The \emph{spread} (\$0.05) is the
difference between the best bid and best ask. The \emph{midpoint}
(\$11.065) is the average of the best bid and best ask. Every order in
an order book has a unique identifier and timestamp indicating the
time at which it was accepted into an order book.

There are four types of messages that traders can submit
to an order book: \emph{add}, \emph{cancel}, \emph{cancel/replace}, and
\emph{market order}. A trader can \emph{add} a limit order into
the order book. She can also \emph{cancel} an order and remove it
from the order book.

If a trader wants to reduce the size of her order,
she can issue a \emph{cancel/replace}, which cancels the order, then
immediately replaces it with another order at the same price, but with
a lower size.

All orders have a \emph{time priority} depending on when they were
accepted into the order book. Earlier orders are executed before later
orders. Note that cancel/replace orders can lower the size of an
order, but not increase it. Cancel/replace orders maintain the time
priority of the original order, so if size increases were allowed,
traders with orders at the highest time priority for a price level
could perpetually increase the size of their order, preventing others
from being able to buy or sell stock at that price level.

A trade occurs when an order is executed through a \emph{market
  order}, which is an order to immediately buy or sell a given
quantity of stock at the best available prices. In the above example,
suppose that the order to buy 100 shares at \$11.05 was submitted
before the order to buy 200 shares at \$11.05. The first order has
priority, so if a market order to buy 200 shares is submitted, the
first order to buy 100 shares will be completely executed, and the
second order to buy 200 shares will only be partially executed.

Now suppose that the market order was to sell 400 shares. Then the
first price level would be filled, and 100 shares from the next price
level would be filled:

\begin{verbatim}
                 Price          Ask Size

                 $11.11         150
                 $11.08         100
     100         $11.01

Bid Size         Price
\end{verbatim}

See \cite{johnson:barry} for more details.

\section*{Examples}

NVIDIA is a graphics processing unit and chipset developer with ticker
symbol NVDA. Consider the order book for NVDA at a leading electronic
exchange on June 8, 2010. We create the \texttt{orderbook} object by
specifying the location of our data file.

<<results = hide>>=
library(orderbook)
@
<<echo = TRUE>>=
file <- system.file("data", "sample.txt",
                    package = "orderbook")
ob <- orderbook(file = file)
ob <- read.orders(ob, 10000)
ob
@

We read in the first 10,000 messages then \texttt{show} the object.
The order book time is displayed in 24-hour time, so it is currently
9:35:02 AM. The message index indicates which row in the data file the
object has read through. The display also shows that there are 631
bids and 1,856 asks outstanding, for a total of 2,487 orders. This
indicates that many earlier orders have been removed through either
cancels or trades.

<<echo = TRUE>>=
summary(ob)
@

Using \texttt{summary} the total order information from \texttt{show}
is repeated. We see that there are 540 ask and 179 bid price levels,
for a total of 719. This indicates that many orders are have been
submitted at the same price level.  The spread is \$0.02, and the
midpoint is \$11.37. The inside market is composed of 2,700 shares
offered at the best bid of \$11.36 and 400 shares offered at the best
ask of \$11.38.

<<echo = TRUE>>=
display(ob)
@

\texttt{display} shows the inside market, along with the four next
best bid and ask price levels and the size at each price level. This
gives the user a simple snapshot of the supply and demand in the
market.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob)
@
\end{figure}

\texttt{plot} is essentially a graphical representation of
\texttt{display}. Price levels are on the y-axis, and size on the
x-axis. The maximum and minimum price levels are 10\% above and below
the midpoint. Note the large number of shares at \$11.01. It is
helpful to know whether the depth at that price level is comprised of
a single order, or several. Using the \texttt{[} method we can view
the order information at particular price levels.

<<echo = TRUE>>=
ob["11.01"]
@

There is an order for 50,000 shares at \$11.01 price level that
accounts for almost all of the size.  We can view a plot of the number
of orders rather than the number of shares at each price level by
specifying \texttt{type = 'o'} when using \texttt{plot}. In the
previous plot the maximum and minimum price levels were 10\% off from
the midpoint, but for this plot we specify a bound of only 3.3\% above
and below the midpoint (on next page).

Note the large number of orders at \$11.00. The \texttt{[} method
returns a \texttt{data.frame}, so we can use \texttt{nrow} to find out
the number of orders at \$11.00.

<<echo = TRUE>>=
nrow(ob["11.00"])
@

There are 56 orders at that price level, which confirms what
we see in the plot.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob, bounds = 0.033, type = 'o')
@
\end{figure}

The following plot shows the supply and demand curves for the order book. The
demand (supply) curve is downsloping (upsloping). This is because more
people want to buy (sell) a stock when the price decreases
(increases). The ask (bid) prices are normalized by the absolute value
of the difference between the highest (lowest) plotted ask (bid) price
level and the the midpoint. The sizes are normalized by the sum of the
sizes across all plotted price levels for each side. See
\cite{cao:orderbook} for more detail.

\begin{figure}
  \centering
  \vspace*{.1in}
<<fig = TRUE>>=
plot(ob, bounds = 0.01, type = "sd")
@
\end{figure}

The following plot shows the supply and demand curves for the order book. The
demand (supply) curve is downsloping (upsloping). This is because more
people want to buy (sell) a stock when the price decreases
(increases). The ask (bid) prices are normalized by the absolute value
of the difference between the highest (lowest) plotted ask (bid) price
level and the the midpoint. The sizes are normalized by the sum of the
sizes across all plotted price levels for each side. See
\cite{cao:orderbook} for more detail.

<<eval = FALSE, echo = TRUE>>=
ob <- load.animation(ob, from = "9:30:00", to = "9:31:00", by = "sec")
@

We can also view a simple animation of the order book between two
times using the \texttt{loadanimation} method.  This generates a
Trellis object for each second between 9:30:00 and 9:31:00.

<<eval = FALSE, echo = TRUE>>=
ob <- load.animation(ob, from = 500, to = 550, by = "msg")
@

Specifying \texttt{by = 'msg'} allows us to see the order book change
as a result of individual messages. This generates Trellis objects for
each message between message 500 in the data file and message 550. The
objects are saved in the R temporary files folder, and their location
is stored in the \texttt{animation} slot within the \texttt{orderbook}
object. A single Trellis object generated using \texttt{by = 'msg'} is
shown below.

\begin{figure}
  \centering
  \vspace*{.1in}
  \includegraphics{orderbook-fig1.eps}
\end{figure}

Black lines separate individual orders. The order nearest to (furthest
from) the middle axis has the highest (lowest) time priority for that
price level. \texttt{loadanimation} fixes the y- and x-axis labels
throughout the animation. The y-axis is chosen so that five price
levels above and below the midpoint are visible at all times, while
the x-axis is chosen so that it never changes. The current message is
printed at the bottom of the plot if \texttt{by = 'msg'}. Often it is
also useful to watch an animation of the orderbook action around the
time of a trade.

<<eval = FALSE, echo = TRUE>>=
ob <- load.trade.animation(ob, before = 30, after = 30, by = 'sec')
@

This finds the next trade from the current order book time and
generates an animation from 30 seconds before the trade to 30 seconds
after the trade. If we specified \texttt{by = 'message'} an animation
for 30 messages before and after the trade are shown. We can watch
these animations using \texttt{animate}.

<<eval = FALSE, echo = TRUE>>=
animate(ob, pause = 0.25)
@

The \texttt{animate} method contains a loop that prints each
object. \texttt{pause} specifies the number of seconds to wait in
between printing the next Trellis object.

Aside from the ability to retrieve summary statistics and create
plots, \pkg{orderbook} has methods for creating new \texttt{orderbook}
objects at different times of interest.

<<eval = FALSE, echo = TRUE>>=
ob <- read.time(ob, "9:30:00")
@

\texttt{read.time} returns an \texttt{orderbook} object at the first
message after the specified time. For example, this returns the
\texttt{orderbook} object at 9:30:00.

<<echo = TRUE>>=
ob <- previous.trade(ob)
ob
@

\texttt{previous.trade} (\texttt{next.trade}) returns an
\texttt{orderbook} object at the file index of the first trade that
occurred before (after) the current order book time. In this case
\texttt{previous.trade} returns the \texttt{orderbook} object at the
first trade to occur before 9:30:00.

<<echo = TRUE>>=
ob <- read.orders(ob, n = -50)
ob
@

\texttt{read.orders} is used to move forwards or backwards in the
order book by a specified number of messages. In this case, an
\texttt{orderbook} object at 50 messages before the current message is
returned.

\section*{Data}

Most brokers and exchanges have their own format for transmitting raw
order data to customers, so it would be unfeasible for us to write
scripts to automatically process all data formats. Consequently, raw
data for an \texttt{orderbook} object must be in the following form:

\begin{verbatim}
type,time,id,price,size,type
A,31285893,1231884,11.49,200,ASK
R,31295779,1231884,150
T,31295779,1231884,11.49,50
C,31295781,1231884
\end{verbatim}

where A, R, T, C mean Add, Replace, Trade, and Cancel,
respectively. The second column is the timestamp of the message in
milliseconds after midnight of the users timezone, and the third
column is the ID of the order. For a cancel/replace the next column is
the new size, while for Add and Trade a column for price comes before
the size column. Add messages also have the type of order (BID/ASK) in
the sixth column.

In this example an order to sell 200 shares at \$11.49 is added to the
order book, followed by a cancel/replace and a trade several seconds
later. Note that the cancel/replace and the trade have the same
timestamp and ID. This is because the \texttt{orderbook} object needs
to be told the new share size after the trade occurs, in addition to
information on the trade. It will not adjust the size of a previous
order after a trade occurs without an accompanying cancel/replace
present. A trade that leads to a full execution should be accompanied
by a cancel message. We see that a few milliseconds after the trade
the order is entirely cancelled.

\section*{Simulation}

\pkg{orderbook} supports adding, replacing, and cancelling orders. Add
orders require the price, size, and type (ASK/BID) of the limit
order. Time and ID are optional, and will default to the maximum time
+ 1 and the maximum ID + 1. Replace messages require the new size and
ID. Cancel orders only require ID. In addition, market orders can be
issued to the order book. Market orders require size and side
(BUY/SELL).

<<echo = TRUE, eval = FALSE>>=
ob <- add.order(ob, 11.20, 300, "ASK")
ob <- remove.order(ob, 1231883)
ob <- replace.order(ob, 1231883, 150)
ob <- market.order(ob, 200, "BUY")
@

Using these tools, the user can write functions to simulate the an
order book. In the following example, we consulted
\cite{gilles:daniel}. We simulate 1,000 messages.  The messages are
chosen based on the following probabilities: 50\% for a cancel
message, 20\% for a market order, and 30\% for a limit order. In the
event of a cancel message the order cancelled is randomly
chosen. Market order have a 50-50 chance for a buy or sell order. The
size of the market order always corresponds to the size of the
individual order at the best ask or bid with the highest time
priority. Limit orders have a 50-50 chance to be an ask or bid. There
is a 35\% chance for the price of a limit order to be within the
spread. If the price is outside of the spread, a price is chosen using
a power law distribution. Finally, the size follows a log-normal
distribution. A  plot of this example simulation is shown below.

<<echo = FALSE, eval=TRUE>>=
simulate <- function(ob, n=1000,
                     action.prob = c(cancel=0.5, market=0.2, limit=0.30),
                     order.type  = 0.5,
                     alpha = 0.3,
                     in.spread.prob = 0.35,
                     ...){

    x = ob@current.ob

    tmp.midpoint = mid.point(ob)
    tmp.bestask = best.ask(ob)
    tmp.bestbid = best.bid(ob)

    for(i in 1:n) {

        x = ob@current.ob
        if(mid.point(ob) == 0){
            current.price = tmp.midpoint
        } else {
            current.price <- mid.point(ob)
        }

        isbuy = runif(1) < order.type

        if(total.orders(ob) < 250){
            action.prob[1] <- 0
            action.prob[4] = 1 - sum(action.prob[1:3])
        } else {
            action.prob[1] = 0.5
            action.prob[4] = 1 - sum(action.prob[1:3])
        }


        action <- sample(c("Cancel", "Market", "Limit", ""),
                         size=1, prob=action.prob)

        if (action == "Cancel") {
              ## pick an existing ID and cancel the order

            ob <- remove.order(ob, sample(x[["id"]], size = 1))

        }
        else if (action == "Market") {

            ## set a new price/ or tick
            if(isbuy) {
                ob <- market.order(ob, type="BUY",
                                   size = best.ask(ob)[2] )

            } else {
                  ob <- market.order(ob, type="SELL",
                                     size = best.bid(ob)[2] )
              }

        }
        if (action == "Limit") {

            if(spread(ob) <= 0.01){
                spread.diff = 0
            } else {
                spread.diff = round(runif(1, 0, spread(ob)), 2)
            }

            out.diff = round((mid.point(ob)*.1)*runif(1)^1/(1 + alpha), 2)

            in.spread = runif(1) < in.spread.prob
            size = round(exp(rnorm(1, mean = 4.5, sd = .8)))

              if(isbuy & in.spread){

                  ob <- add.order(ob, price= max(0,
                                      best.bid(ob)[1] + spread.diff),
                                  size, type="BID")
              } else if(isbuy & !in.spread){
                  ob <- add.order(ob, price = max(0,
                                      best.bid(ob)[1] - out.diff),
                                  size, type = "BID")
              } else if(!isbuy & in.spread){

                  ob <- add.order(ob, price= max(0,
                                      best.ask(ob)[1] - spread.diff),
                                  size, type="ASK")
              } else if (!isbuy & !in.spread){
                  ob <- add.order(ob, price = max(0,
                                      best.ask(ob)[1] + out.diff),
                                  size, type = "ASK")
              }
        }
    }


    invisible(ob)
}
@

<<echo = TRUE, eval = TRUE>>=
ob <- simulate(ob)
@
\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob)
@
\end{figure}

\section*{Conclusion}
The current release of the \pkg{orderbook} package is meant to serve
as a proof-of-concept. Relatively sophisticated order book analytics
are possible using an open source package. The \pkg{orderbook} package
is part of a collection of packages for performing tests of financial
conjectures. See \cite{kane:backtest} and \cite{kane:portfolio} for
more information on the \pkg{backtest} and \pkg{portfolio} packages,
respectively.


\address{David Kane, Andrew Liu and Khanh Nguyen \\
  Kane Capital Management \\
  Cambridge, MA, USA\\
  \email{dave@kanecap.com}, \email{Andrew.T.Liu@williams.edu},
  and \email{knguyen@cs.umb.edu}
}

\bibliography{orderbook}
\end{article}
\end{document}
