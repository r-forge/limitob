\documentclass[a4paper]{report}
\usepackage[round]{natbib}


\usepackage{Rnews}
\usepackage{fancyvrb}
\usepackage{Sweave}

\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontsize=\small,fontshape=sl}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{Scode}{Verbatim}{fontsize=\small,fontshape=sl}

%% \SweaveOpts{prefix.string=graphics/portfolio}

\bibliographystyle{abbrvnat}

\begin{document}
\begin{article}


\title{orderbook}
\author{Andrew Liu and Khanh Nguyen}

%%\VignetteIndexEntry{Using the orderbook package}
%%\VignetteDepends{kcm.orderbook}

<<echo = FALSE>>=
options(width = 50, digits = 2, scipen = 5)
cat.df.without.rownames <- function (d, file = ""){
  stopifnot(is.data.frame(d))
  row.names(d) <- 1:nrow(d)
  x <- NULL
  conn <- textConnection("x", "w", local = TRUE)
  capture.output(print(d), file = conn)
  close(conn)
  cat(substring(x, first = max(nchar(row.names(d))) + 2), sep = "\n",
      file = file)
}
@

\maketitle


\setkeys{Gin}{width=0.95\textwidth}

\section*{Introduction}

The limitob package provides functions for exploring and visualizing orderbook data. For example, we may want to study an orderbook immediately before a trade occurs, or maybe 50 orders before a trade occurs, or we want to visualize the change of an orderbook overtime as the price level fluctuates. The microstructure insights from this sort of analysis can help in researching short-term trading strategies.

\section*{Background}
To demonstrate the capabilities of the limitob package, we consider the first 10000 orders for a single stock on June 8, 2010. The orders are in following form

\begin{verbatim}
A,31285893,1231884,11.49,200,ASK
R,31295779,1231884,150
T,31295779,1231884,11.49,50,BUY
C,31295781,1231884
\end{verbatim}

where A, R, T, C mean Add, Replace, Trade, and Cancel order, respectively. The first number is the timestamp of the order in milliseconds after midnight of the users timezone, and the second number (or string) is the ID of the order. For a Replace the next number is the new size, while for Add and Trade price comes before size, followed by the type of order/transaction (BID/ASK or BUY/SELL).

<<results = hide>>=
library(kcm.orderbook)
@
<<echo = TRUE>>=
ob = orderbook(feed = "sample.txt")
ob = read.orders(ob, 10000)
ob
@

We create the orderbook object by setting the feed as our \texttt{sample.txt} data file. Then we read in the first 10,000 orders. We see that the 10000th order occurs at 9:35:02, and there are 631 outstanding bid orders, and 1,856 outstanding ask orders. However, sometimes the user may want to jump to a place in the orderbook by time; for example, it is interesting to view the orderbook when the market opens.

<<echo = TRUE>>=
ob = read.time(ob, "9:30:00")
summary(ob)
display(ob)
@

Summary provides the user with a set of important summary statistics, while display by default shows the top five bid and ask price levels. Suppose we wanted to see the first trade after this time.

<<echo = TRUE>>=
ob = next.trade(ob)
display(ob, n = 3)
@

Note that to save space I set \texttt{n = 31} so that only the top three bid and ask price levels are displayed. Sometimes a graphical representation is more useful than simply seeing the price levels and order sizes in text. By default, the maximum and minimum price levels shown are 10\% above and below the midpoint price, respectively.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob)
@
\end{figure}

Users might want to view the orderbook fifty orders prior to the
trade occurring. Here we also demonstrate setting the bounds to only 5\% above and below the midpoint price.

<<echo = TRUE>>=
ob.new = read.orders(ob, -50)
@
\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob.new, bounds = 0.05)
@
\end{figure}

Note that there is a particularly large order around \$11.03. It is
helpful to know whether the volume at that price level is comprised of
a single order, or several.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob.new, bounds = 0.05, type = 'o')
@
\end{figure}

Viewing the orderbook with bids on one side and asks on another is
useful, but sometimes users may want to view them side by side to more
directly compare the supply and demand at each price level.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob.new, type = 's')
@
\end{figure}

Users can also view the previous trade, and then pass in two different orderbook objects to generate an orderbook animation.

<<echo = TRUE, eval = FALSE>>=
prev.ob = previous.trade(ob)
animate.ob(prev.ob, ob)
@

To be added: Other visualizations

\section*{Simulation}

The limitob object supports adding, replacing, and cancelling orders. To add an order, the user needs to specify the price, size, and type. Time and ID are optional, and will default to the maximum time and the maximum ID + 1, respectively. For replacing an order, only ID and size need to be given, and for cancelling an order, only ID is necessary. Market orders are also possible by specifying the size and side (BUY/SELL).

<<echo = TRUE, eval = FALSE>>=
display(ob)
ob = add.order(ob, stuff)
ob = remove.order(ob, stuff)
ob = replace.order(ob, stuff)
ob = market.order(ob, 200, "BUY")
display(ob)
@

Using these tools, the user can write functions to simulate the movement of an orderbook.

<<echo = TRUE, eval = FALSE>>=
plot(ob)
ob = simulate(ob)
plot(ob)
@

Need to ask Khanh how to use the simulate

\section*{Future work}

Eventually, we would like to incorporate the ability to backtest trading strategies into the limitob package.

\section*{Conclusion}

\end{article}
\end{document}
