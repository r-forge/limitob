    names(x) = c(ob.names[1], ob.names[2], ob.names[3])

    return(x)
}

object = a
a

    x = .combine.size(object, bounds)
    ob.names = object@ob.names
bounds = .1

    x = .combine.size(object, bounds)
    ob.names = object@ob.names
head(x)
best.ask
best.bid
min.price.diff
max.price.diff
max.size
head9x)
head(x0
)
head(x)
ob.names = object@ob.names
                  ask = x[x[[ob.names[3]]] == ob.names[6],]
head(ask)

                  ask = x[x[[ob.names[3]]] == ob.names[6], 1:5]

                  ask = x[x[[ob.names[3]]] == ob.names[6],][1:5]
ask
ask[1:5]
ask[1:5,]

                  ask = x[x[[ob.names[3]]] == ob.names[6],][1:5,]
ask
head(x)
nrow(x)
bounds = 10
max.diff
ask.diff
bid.diff
bid
ask
bid
bid = x[x[[ob.names[3]]] == ob.names[7],]
bid
bid = bid[(nrow(bid) - bounds):nrow(bid),]
bid
nrow(bid)
nrow(ask)
nrow(bid)
bid
max.diff
ask.diff
bid.diff
ask
bid
q = rbind(ask,bid)
q
class(q$price)
q$price = as.factor(q$price)
q
barchart(price ~ size | type, q)
q
x = q
x
x$hi = c(1,2,3,4,,5)
x$hi = c(1,2,3,4,5)
x
x$hi = NULL
x
class(x)
x[1,] = NULL
x$y = c(seq(1,10,1), seq(10,1, -1))
x
barchart(y ~ size | type)
barchart(y ~ size | type, x)
barplot(y~size |type, x)
plot( y~size |type, x)
barplot( y~size |type, x)
barplot( y~size, x)
barchart( y~size, x)
barchart( y~size, x, groups = type)
plot(a)
ask
bid
bid = bid[order(bid[[ob.names[1]]]),]
b
bid
bid = bid[order(bid[[ob.names[1]]], decreasing = TRUE),]
n = 10
x
x
x
x
ask
bid
class$bid(price)
class(bid$price)
bid
bid
bid
ask
x
x
x
x
library(grid)
signif(15100, 1)
signif(10300, 1)
celing(.3)
ceiling(.3)
ceiling(4.3)
ceiling(15100)
ceiling(15100/10)
q()
load(file.choose())
plot(a)
q()
library(kcm.orderbook)
load(file.choose())
a
plot(a)
plot(a, type = "o")
plot(a, type = "s")
q()
library(kcm.orderbook())
load(file.choose())
plot(a, type = "o")
q()
library(kcm.orderbook())
load(file.choose())
plot(a, type = "o")
plot(a,bounds = 0.05, type = "o")
plot(a,n = 10, type = "s")
plot(a,n = 20, type = "s")
q()
library(kcm.orderbook)
load(file.choose())
object = a
a

.combine.size <- function(object, bounds){


    ## Pull out the current.ob and ob.names.

    x = object@current.ob
    ob.names = object@ob.names


    ## Removes rows 10% above and below the midpoint.

    x = x[x[[ob.names[1]]] < mid.point(object)*(1 + bounds) &
    x[[ob.names[1]]] > mid.point(object)*(1 - bounds),]

    ## Splits x into ask and bid data frames.
    x <- split(x, x[[ob.names[3]]])
    ask <- x[[ob.names[6]]]
    bid <- x[[ob.names[7]]]
    ## ask = x[x[[ob.names[3]]] == ob.names[6],]
    ## bid = x[x[[ob.names[3]]] == ob.names[7],]

    ## Aggregate sizes by price level.

    if(nrow(ask) > 0){
        ask = aggregate(ask[[ob.names[2]]], by = list(ask[[ob.names[1]]]), sum)
        ask <- data.frame(ask, type = rep(ob.names[6], nrow(ask)))
    }

    if(nrow(bid) > 0){
        bid = aggregate(bid[[ob.names[2]]], by = list(bid[[ob.names[1]]]), sum)
        bid <- data.frame(bid, type = rep(ob.names[7], nrow(bid)))
    }

    x  = rbind(ask, bid)

    ## Adds a type column to x.

    #x = data.frame(x, type = character(nrow(x)))
    ##levels(x$type) = c(ob.names[6], ob.names[7])

    ## Fills in the type column depending on if the price levels are in the ask
    ## or bid data frames.

    ##x$type[x[[1]] %in% ask[[ob.names[1]]]] = ob.names[6]
    ##x$type[x[[1]] %in% bid[[ob.names[1]]]] = ob.names[7]

    ## Names the new data frame and returns it.
    names(x) = c(ob.names[1], ob.names[2], ob.names[3])

    return(x)
}

from = "9:30:00"
to = "9:32:00"
by = "sec"
head(time)
trellis.vector
    for (i in 1:length(time)){
        x = read.time(object, time[i])
        x = .combine.size(x, bounds = 0.1)
        x[[ob.names[3]]] <- ordered(x[[ob.names[3]]], levels = c(ob.names[7],
                                                      ob.names[6]))
        trellis.vector[i] <- xyplot(x[[ob.names[1]]]~x[[ob.names[2]]]|x[[ob.names[3]]], data = x,
                                    ylab = "Price", xlab = "Size (Shares)", main = "Order Book",
                                    scales = list(x = list(relation = "free",
                                                  limits = x.limits,
                                                  at = x.at,
                                                  axs = "i"),
                                    y = list(at = tmp.at, alternating = 3)),
                                    yscale.components = new.yscale.components,
                                    panel = function(...){
                                        panel.xyplot(...)
                                        panel.lines(..., type = "H")
                                    }
                                    )
    }
