\documentclass[a4paper]{report}
\usepackage[round]{natbib}


\usepackage{Rnews}
\usepackage{fancyvrb}
\usepackage{Sweave}

\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontsize=\small,fontshape=sl}
\DefineVerbatimEnvironment{Soutput}{Verbatim}{fontsize=\small}
\DefineVerbatimEnvironment{Scode}{Verbatim}{fontsize=\small,fontshape=sl}

%% \SweaveOpts{prefix.string=graphics/portfolio}

\bibliographystyle{abbrvnat}

\begin{document}
\begin{article}

\title{orderbook}
\author{David Kane, Andrew Liu and Khanh Nguyen}

%%\VignetteIndexEntry{Using the orderbook package}
%%\VignetteDepends{orderbook}

<<echo = FALSE>>=
options(width = 50, digits = 2, scipen = 5)
cat.df.without.rownames <- function (d, file = ""){
  stopifnot(is.data.frame(d))
  row.names(d) <- 1:nrow(d)
  x <- NULL
  conn <- textConnection("x", "w", local = TRUE)
  capture.output(print(d), file = conn)
  close(conn)
  cat(substring(x, first = max(nchar(row.names(d))) + 2), sep = "\n",
      file = file)
}
@

\maketitle


\setkeys{Gin}{width=0.95\textwidth}

\section*{Introduction}

The \pkg{orderbook} package provides functions for exploring and visualizing
orderbook data. Using the \pkg{orderbook} package, analysts can
create a object of class \texttt{orderbook}, that is able to accept
add, replace, cancel, and market orders. From this object summary statistics
such as the spread, number of price levels, and depth of the market can be
retrieved.

\section*{Background}

An orderbook keeps track of the outstanding limit orders for a current
stock. For example, person A may want to purchase 100 shares of IBM at
\$11.00, in which case A would submit a limit order. In the orderbook
for IBM this would be represented as a \emph{bid} at \$11.00 for 100
shares. Suppose person B submits the same order. Then there would be
200 shares offered at \$11.00. Next, consider a Person C wants to sell
150 shares of IBM at \$11.05. The orderbook now has an \emph{ask} order.

\begin{verbatim}
                 Price          Ask Size

                 $11.05         150
     200         $11.00

Bid Size         Price
\end{verbatim}

The best ask/bid is the lowest/highest price level that
individuals are willing to sell/buy stocks. In this case the best ask
is \$11.05, and the best bid is \$11.00, and the \emph{spread}, which
is the difference between the two, is \$0.05. The \emph{depth}, or
number of shares being offered at each price level, is 150 at \$11.05,
and 200 at \$11.00.  We call this the \emph{inside market}. Another noteworthy
statistic is the \emph{midpoint}, which is the simple average
of the best bid and best ask.

Now if A decided he only wanted to buy 50 shares of IBM he could submit a
replace order to reduce the number of shares he is willing to
purchase. Note that a replace order can never increase the number of
shares to be purchased or sold. The reason for this is that in the
event of a market order, the orders submitted earliest are processed
(filled) first. Now perhaps B decides that he wants to buy IBM at
\$10.95 instead of \$11.00. B would cancel his order, then submit a
new limit order at the lower price. This would result in two
\emph{price levels} on the bid side.
\columnbreak
\begin{verbatim}
                 Price          Ask Size

                 $11.05         150
      25         $11.00
     100         $10.95

Bid Size         Price
\end{verbatim}

A person D may come in and submit a market order to sell 125 shares of
IBM. With a market order, price does not matter, and transactions are
carried out until the desired number of shares to be bought or sold is
reached. In this case, A will buy 50 shares at \$11.00, and B will buy
75 shares at \$10.95.

\begin{verbatim}
                 Price          Ask Size

                 $11.05         150
      25         $10.95

Bid Size         Price
\end{verbatim}

Hundreds of thousands of orders are submitted daily for a single
stock, and the orderbook package allows the user to examine the
orderbook at any given point during the day.

\section*{Examples}

Consider the first 10,000 orders for a NVDA on June 8, 2010. Start by
loading and examining the input data.

<<results = hide>>=
library(orderbook)
@
<<echo = TRUE>>=
file <- paste(.libPaths(), "orderbook", "data", "sample.txt", sep = "/")
ob <- orderbook(file = file)
ob <- read.orders(ob, 10000)
ob
@

We create the orderbook object by giving the object the location of
our data file. Then we read in the first 10,000 orders. Only 2,487
orders remain, indicating that many have either been cancelled or
removed through trades.
\columnbreak
<<echo = TRUE>>=
summary(ob)
@

In addition to the number of orders, with \texttt{summary} we also see
the number of price levels, spread, midpoint, and inside market.

<<echo = TRUE>>=
display(ob)
@

\texttt{summary} provides the user with a set of important summary statistics,
while \texttt{display} shows the top five bid and ask price
levels, along with the corresponding depth. Finally, \texttt{plot}
shows a graphical representation of the orderbook with price levels on
the y-axis, and size on the x-axis. By default, the maximum and
minimum price levels are 10\% above and below the midpoint price, respectively.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob)
@
\end{figure}

Note that there is a particularly large order at \$11.01. It is
helpful to know whether the depth at that price level is comprised of
a single order, or several. Additionally, we lower the bounds since we
are really only concerned with the \$11.01 price level.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob, bounds = 0.033, type = 'o')
@
\end{figure}

At first it appears that there are many orders at \$11.01, but upon
closer examination we see that there are 56 orders at \$11.00, but
only 3 at \$11.01, indicating that the depth at that price level is
composed of a few very large orders (in this case one order for 50,000).

Viewing the orderbook with bids on one side and asks on another is
useful, but sometimes users may want to view them side by side to more
directly compare the supply and demand at each price level.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob, type = 's')
@
\end{figure}

Additionally, The user can view a simple animation of the orderbook between
two times.

<<eval = FALSE, echo = TRUE>>=
animate.ob(ob, "9:30:00", "9:32:00")
@

Finally, users can easily plot the trade data by using
\texttt{plot.trade}. This creates a simple bar graph of the number of
shares traded at each price level.

\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plotTrade(ob)
@
\end{figure}

Aside from the ability to easily retrieve summary statistics and
create graphics, \pkg{orderbook} can create different \texttt{orderbook}
objects for viewing the orderbook at different times. For example, the
user may want to view the orderbook when the market opens.

<<eval = FALSE, echo = TRUE>>=
ob <- read.time(ob, "9:30:00")
@

Suppose the user wants to view the last pre-market
trade. \texttt{previous.trade} returns the state of the
orderbook at the time of the trade immediately preceding the current
time ocurred, and \texttt{next.trade} returns the state
of the orderbook at the time of the next trade.

<<eval = FALSE, echo = TRUE>>=
next.ob <- next.trade(ob)
prev.ob <- prev.trade(ob)
@

To look at the 50 orders preceding \texttt{next.ob} or following
\texttt{next.ob}, we use the \texttt{read.orders} command.

<<eval = FALSE, echo = TRUE>>=
a <- read.orders(next.ob, n = 50)
b <- read.orders(next.ob, n = -50)
@

\section*{Data}

Most brokers and exchanges have their own format of transmitting raw
order data to customers, so it would be unfeasible for us to write
scripts to automatically process that data. Consequently, raw data for an
\texttt{orderbook} object should be in the following form:

\begin{verbatim}
A,31285893,1231884,11.49,200,ASK
R,31295779,1231884,150
T,31295779,1231884,11.49,50,BUY
C,31295781,1231884
\end{verbatim}

where A, R, T, C mean Add, Replace, Trade, and Cancel order,
respectively. The first number is the timestamp of the order in
milliseconds after midnight of the users timezone, and the second
number (or string) is the ID of the order. For a Replace the next
number is the new size, while for Add and Trade price comes before
size, followed by the type of order/transaction (BID/ASK or
BUY/SELL).

\section*{Simulation}

The orderbook object supports adding, replacing, and cancelling
orders. To add an order, the user needs to specify the price, size,
and type. Time and ID are optional, and will default to the maximum
time and the maximum ID + 1, respectively. For replacing an order,
only ID and size need to be given, and for cancelling an order, only
ID is necessary. Market orders are also possible by specifying the
size and side (BUY/SELL).

<<echo = TRUE, eval = FALSE>>=
display(ob)
ob <- add.order(ob, stuff)
ob <- remove.order(ob, stuff)
ob <- replace.order(ob, stuff)
ob <- market.order(ob, 200, "BUY")
display(ob)
@

Using these tools, the user can write functions to simulate the movement of an orderbook.

In the following example, we consulted \cite{gilles:daniel}. We
simulate 1,000 orders. In each iteration there is a 50\% chance for a
cancel order to be placed, 20\% chance for a market order, and 30\%
chance for a limit order. Orders are cancelled completely randomly,
and for a market order there is a 50-50 chance for a buy or sell order
to be placed. The size of the market order always corresponds to the
size of the best ask or bid at the front of the queue. When a limit order
is placed, there is a 50-50 chance for it to be an ask or bid. Then
there is a 35\% chance for the price to be within the spread, in which
case a price is chosen based on a uniform distribution. If the price
is determined to be outside of the spread, a price is chosen using a
power law distribution. The size follows a log-normal distribution.

<<echo = FALSE, eval=TRUE>>=
simulate <- function(ob, n=1000,
                     action.prob = c(cancel=0.5, market=0.2, limit=0.30),
                     order.type  = 0.5,
                     alpha = 0.3,
                     in.spread.prob = 0.35,
                     ...){

    x = ob@current.ob
    ob.names = ob@ob.names
    tmp.midpoint = mid.point(ob)
    tmp.bestask = best.ask(ob)
    tmp.bestbid = best.bid(ob)

    for(i in 1:n) {

        x = ob@current.ob
        if(mid.point(ob) == 0){
            current.price = tmp.midpoint
        } else {
            current.price <- mid.point(ob)
        }

        isbuy = runif(1) < order.type

        if(total.orders(ob) < 250){
            action.prob[1] <- 0
            action.prob[4] = 1 - sum(action.prob[1:3])
        } else {
            action.prob[1] = 0.5
            action.prob[4] = 1 - sum(action.prob[1:3])
        }


        action <- sample(c("Cancel", "Market", "Limit", ""),
                         size=1, prob=action.prob)

        if (action == "Cancel") {
              ## pick an existing ID and cancel the order

            ob <- remove.order(ob, sample(x[[ob.names[5]]], size = 1))

        }
        else if (action == "Market") {

            ## set a new price/ or tick
            if(isbuy) {
                ob <- market.order(ob, type="BUY",
                                   size = best.ask(ob)[2] )

            } else {
                  ob <- market.order(ob, type="SELL",
                                     size = best.bid(ob)[2] )
              }

        }
        if (action == "Limit") {

            if(spread(ob) <= 0.01){
                spread.diff = 0
            } else {
                spread.diff = round(runif(1, 0, spread(ob)), 2)
            }

            out.diff = round((mid.point(ob)*.1)*runif(1)^1/(1 + alpha), 2)

            in.spread = runif(1) < in.spread.prob
            size = round(exp(rnorm(1, mean = 4.5, sd = .8)))

              if(isbuy & in.spread){

                  ob <- add.order(ob, price= max(0,
                                      best.bid(ob)[1] + spread.diff),
                                  size, type="BID")
              } else if(isbuy & !in.spread){
                  ob <- add.order(ob, price = max(0,
                                      best.bid(ob)[1] - out.diff),
                                  size, type = "BID")
              } else if(!isbuy & in.spread){

                  ob <- add.order(ob, price= max(0,
                                      best.ask(ob)[1] - spread.diff),
                                  size, type="ASK")
              } else if (!isbuy & !in.spread){
                  ob <- add.order(ob, price = max(0,
                                      best.ask(ob)[1] + out.diff),
                                  size, type = "ASK")
              }
        }
    }


    invisible(ob)
}
@


<<echo = TRUE, eval = TRUE>>=
ob <- simulate(ob)
@
\begin{figure}
\centering
\vspace*{.1in}
<<fig = TRUE>>=
plot(ob)
@
\end{figure}



\section*{Conclusion}
In this  article, we have described the orderbook package. orderbook
aims to provide user-friendly statistical and visualization tools for
analyzing orderbooks. We demonstrated the functionality of the
package through a series of examples. Users who deal frequently with
orderbook data (i.e high frequency traders) will hopefully
find the package useful. While the curent package is not complex
enough to be a stand-alone platform for developing trading stategies,
it can be useful for generating ideas for strategies.

\address{David Kane, Andrew Liu and Khanh Nguyen \\
  Kane Capital Management \\
  Cambridge, MA, USA\\
  \email{dave@kanecap.com}, \email{Andrew.T.Liu@williams.edu},
  and \email{knguyen@cs.umb.edu}
}

\bibliography{orderbook}
\end{article}
\end{document}
